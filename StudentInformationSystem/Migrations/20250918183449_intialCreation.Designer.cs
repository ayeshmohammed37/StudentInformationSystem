// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentInformationSystem.Data;

#nullable disable

namespace StudentInformationSystem.Migrations
{
    [DbContext(typeof(SISDbContext))]
    [Migration("20250918183449_intialCreation")]
    partial class intialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStaff", b =>
                {
                    b.Property<int>("CoursesCourseID")
                        .HasColumnType("int");

                    b.Property<int>("StaffsID")
                        .HasColumnType("int");

                    b.HasKey("CoursesCourseID", "StaffsID");

                    b.HasIndex("StaffsID");

                    b.ToTable("CourseStaff");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.CourseGradeModel.CourseGrade", b =>
                {
                    b.Property<int>("CourseGradeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CourseEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CourseStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("CourseGradeID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("CourseGrades");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.CourseModel.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseType")
                        .HasColumnType("int");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Requirment")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.DepartmentCourseModel.DepartmentCourse", b =>
                {
                    b.Property<int>("DepartmentCourseID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentCourseID");

                    b.HasIndex("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("DepartmentCourses");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.DepartmentModel.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentHeadID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentHeadID")
                        .IsUnique()
                        .HasFilter("[DepartmentHeadID] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.Shared.Person", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomeTele")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailBox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("StudentInformationSystem.Models.AdministratorModel.Administrator", b =>
                {
                    b.HasBaseType("StudentInformationSystem.Models.Shared.Person");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.StaffModel.Staff", b =>
                {
                    b.HasBaseType("StudentInformationSystem.Models.Shared.Person");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.StudentModel.Student", b =>
                {
                    b.HasBaseType("StudentInformationSystem.Models.Shared.Person");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("StaffID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseStaff", b =>
                {
                    b.HasOne("StudentInformationSystem.Models.CourseModel.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Models.StaffModel.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentInformationSystem.Models.CourseGradeModel.CourseGrade", b =>
                {
                    b.HasOne("StudentInformationSystem.Models.CourseModel.Course", "Course")
                        .WithMany("CourseGrades")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Models.StudentModel.Student", "Student")
                        .WithMany("CourseGrades")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.DepartmentCourseModel.DepartmentCourse", b =>
                {
                    b.HasOne("StudentInformationSystem.Models.CourseModel.Course", "Course")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentInformationSystem.Models.DepartmentModel.Department", "Department")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.DepartmentModel.Department", b =>
                {
                    b.HasOne("StudentInformationSystem.Models.StaffModel.Staff", "DepartmentHead")
                        .WithOne("Department")
                        .HasForeignKey("StudentInformationSystem.Models.DepartmentModel.Department", "DepartmentHeadID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DepartmentHead");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.StudentModel.Student", b =>
                {
                    b.HasOne("StudentInformationSystem.Models.DepartmentModel.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("StudentInformationSystem.Models.StaffModel.Staff", "Advisor")
                        .WithMany("Students")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Advisor");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.CourseModel.Course", b =>
                {
                    b.Navigation("CourseGrades");

                    b.Navigation("DepartmentCourses");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.DepartmentModel.Department", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.StaffModel.Staff", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentInformationSystem.Models.StudentModel.Student", b =>
                {
                    b.Navigation("CourseGrades");
                });
#pragma warning restore 612, 618
        }
    }
}
